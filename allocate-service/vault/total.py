import os
import json
from pathlib import Path
from dotenv import load_dotenv
import hvac
import xlsxwriter

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
load_dotenv()

VAULT_ADDR = os.getenv("VAULT_ADDR")
VAULT_TOKEN = os.getenv("VAULT_TOKEN")
CA_CERT = os.getenv("CA_CERT", "CA.crt")

if not VAULT_ADDR or not VAULT_TOKEN:
    raise SystemExit("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã VAULT_ADDR –∏–ª–∏ VAULT_TOKEN")

client = hvac.Client(url=VAULT_ADDR, token=VAULT_TOKEN, verify=CA_CERT)
if not client.is_authenticated():
    raise SystemExit("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ Vault")

print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Vault: {VAULT_ADDR}")

# ============================================================
# üîß –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (—Ç–æ–ª—å–∫–æ GET/LIST)
# ============================================================
def vault_request(method: str, path: str):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π read-only –∑–∞–ø—Ä–æ—Å –∫ Vault API."""
    if not path.startswith("/v1/"):
        path = f"/v1/{path.lstrip('/')}"
    method = method.upper()
    try:
        if method == "LIST":
            resp = client.adapter.request("LIST", path)
        elif method == "GET":
            resp = client.adapter.get(path)
        else:
            raise ValueError(f"–ú–µ—Ç–æ–¥ {method} –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω (—Ç–æ–ª—å–∫–æ GET/LIST)")
        return resp.json() if hasattr(resp, "json") else resp
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {method} {path}: {e}")
        return {}

# ============================================================
# üîπ 1. –ê–ª–∏–∞—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫—Ç–æ –∏ —á–µ—Ä–µ–∑ —á—Ç–æ –∑–∞—Ö–æ–¥–∏—Ç)
# ============================================================
def get_aliases():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π/—Å–µ—Ä–≤–∏—Å—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º –ª–æ–≥–∏–Ω–∞."""
    resp = vault_request("GET", "identity/alias/id")
    key_info = (resp.get("data") or {}).get("key_info", {})
    if not key_info:
        print("‚ö†Ô∏è Alias-–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (key_info –ø—É—Å—Ç).")
        return [], []

    rows = []
    stats = {}

    for aid, info in key_info.items():
        meta = info.get("metadata", {}) or {}
        mount_type = (info.get("mount_type") or "").lower().strip()
        username = (
            meta.get("effectiveUsername")
            or meta.get("service_account_name")
            or meta.get("name")
            or info.get("name")
        )

        row = {
            "alias_id": aid,
            "canonical_id": info.get("canonical_id"),
            "name": info.get("name"),
            "mount_type": mount_type,
            "mount_path": info.get("mount_path"),
            "effective_username": username,
            "namespace": meta.get("service_account_namespace", "")
        }
        rows.append(row)
        stats[mount_type] = stats.get(mount_type, 0) + 1

    print(f"üîπ –ù–∞–π–¥–µ–Ω–æ alias-–æ–≤: {len(rows)}")
    print("üìä –¢–∏–ø—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
    for k, v in stats.items():
        print(f"   {k:<15} ‚Üí {v}")

    stats_rows = [{"auth_type": k, "count": v} for k, v in sorted(stats.items())]
    return rows, stats_rows

# ============================================================
# üî∏ 2. LDAP-–≥—Ä—É–ø–ø—ã
# ============================================================
def get_ldap_groups():
    resp = vault_request("LIST", "auth/ldap/groups")
    groups = (resp.get("data") or {}).get("keys", [])
    print(f"üî∏ LDAP-–≥—Ä—É–ø–ø –≤ Vault: {len(groups)}")
    return [{"ldap_group": g} for g in groups]

# ============================================================
# üóÑ 3. KV-–º–æ–Ω—Ç—ã
# ============================================================
def get_kv_mounts():
    mounts = vault_request("GET", "sys/mounts").get("data", {})
    result = []
    for mpath, meta in mounts.items():
        if meta.get("type") == "kv" and mpath.endswith("/"):
            v = (meta.get("options", {}) or {}).get("version")
            result.append({
                "mount": mpath,
                "engine": "kv v2" if v == "2" else "kv v1"
            })
    print(f"üóÑ –ù–∞–π–¥–µ–Ω–æ KV-–º–æ–Ω—Ç–æ–≤: {len(result)}")
    return result

# ============================================================
# üîë 4. –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
# ============================================================
def get_token_stats():
    resp = vault_request("LIST", "auth/token/accessors")
    tokens = (resp.get("data") or {}).get("keys", [])
    total = len(tokens)
    print(f"üîë –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {total}")
    return [{"active_tokens": total}]

# ============================================================
# üìä 5. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ Excel-–æ—Ç—á—ë—Ç–∞
# ============================================================
def write_excel(filename, aliases, groups, kvs, tokens, alias_stats):
    out = Path(filename)
    workbook = xlsxwriter.Workbook(out)
    bold = workbook.add_format({"bold": True, "bg_color": "#F0F0F0"})

    def write_sheet(ws_name, data):
        ws = workbook.add_worksheet(ws_name)
        if not data:
            ws.write(0, 0, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
        if not isinstance(data[0], dict):
            ws.write(0, 0, f"–û—à–∏–±–∫–∞: –æ–∂–∏–¥–∞–ª–∏—Å—å dict, –ø–æ–ª—É—á–µ–Ω {type(data[0])}")
            ws.write(1, 0, str(data))
            return
        headers = list(data[0].keys())
        for col, h in enumerate(headers):
            ws.write(0, col, h, bold)
        for row_idx, item in enumerate(data, start=1):
            for col, h in enumerate(headers):
                ws.write(row_idx, col, str(item.get(h, "")))

    write_sheet("Aliases", aliases)
    write_sheet("Auth Types Summary", alias_stats)
    write_sheet("LDAP Groups", groups)
    write_sheet("KV Mounts", kvs)
    write_sheet("Token Stats", tokens)

    summary = workbook.add_worksheet("Summary")
    summary.write("A1", "Vault Address", bold)
    summary.write("B1", VAULT_ADDR)
    summary.write("A2", "–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    summary.write("B2", len(aliases))
    summary.write("A3", "LDAP –≥—Ä—É–ø–ø")
    summary.write("B3", len(groups))
    summary.write("A4", "KV Mounts")
    summary.write("B4", len(kvs))
    summary.write("A5", "–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤")
    summary.write("B5", tokens[0]["active_tokens"] if tokens else 0)

    workbook.close()
    print(f"\nüìÅ –û—Ç—á—ë—Ç –≥–æ—Ç–æ–≤: {out.resolve()}")

# ============================================================
# üöÄ –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
# ============================================================
def main():
    aliases, alias_stats = get_aliases()
    groups = get_ldap_groups()
    kvs = get_kv_mounts()
    tokens = get_token_stats()
    write_excel("vault_usage_report.xlsx", aliases, groups, kvs, tokens, alias_stats)

if __name__ == "__main__":
    main()
