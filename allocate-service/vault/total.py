import os
import pandas as pd
from pathlib import Path
from dotenv import load_dotenv
import hvac

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()

VAULT_ADDR = os.getenv("VAULT_ADDR")
VAULT_TOKEN = os.getenv("VAULT_TOKEN")
CA_CERT = os.getenv("CA_CERT", "CA.crt")

if not VAULT_ADDR or not VAULT_TOKEN:
    raise SystemExit("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã VAULT_ADDR –∏–ª–∏ VAULT_TOKEN")

client = hvac.Client(url=VAULT_ADDR, token=VAULT_TOKEN, verify=CA_CERT)
if not client.is_authenticated():
    raise SystemExit("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ Vault")

print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Vault: {VAULT_ADDR}")

# ============================================================
# üîß –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è Vault API (—Ç–æ–ª—å–∫–æ GET –∏ LIST)
# ============================================================
def vault_request(method: str, path: str):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç GET –∏–ª–∏ LIST-–∑–∞–ø—Ä–æ—Å –∫ Vault –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON."""
    method = method.upper()
    if not path.startswith("/v1/"):
        path = f"/v1/{path.lstrip('/')}"
    try:
        if method == "LIST":
            resp = client.adapter.request("LIST", path)
        elif method == "GET":
            resp = client.adapter.get(path)
        else:
            raise ValueError(f"–ú–µ—Ç–æ–¥ {method} –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω (—Ç–æ–ª—å–∫–æ GET/LIST).")
        return resp.json() if hasattr(resp, "json") else resp
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {method} {path}: {e}")
        return {}

# ============================================================
# üîπ 1. LDAP-–≥—Ä—É–ø–ø—ã, –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–µ –∫ Vault
# ============================================================
def get_vault_ldap_groups():
    auths = vault_request("GET", "sys/auth").get("data", {})
    ldap_path = next((p for p, meta in auths.items() if meta.get("type") == "ldap"), "auth/ldap/")
    resp = vault_request("LIST", f"{ldap_path}groups")
    groups = (resp.get("data") or {}).get("keys", [])
    print(f"üîπ LDAP-–≥—Ä—É–ø–ø –≤ Vault: {len(groups)} ({ldap_path})")
    return pd.DataFrame({"Vault LDAP Groups": groups}), ldap_path

# ============================================================
# üî∏ 2. –ê–ª–∏–∞—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–∏–ø –ª–æ–≥–∏–Ω–∞, backend)
# ============================================================
def get_vault_aliases():
    alias_ids = (vault_request("LIST", "identity/alias/id").get("data") or {}).get("keys", [])
    print(f"üî∏ –ù–∞–π–¥–µ–Ω–æ alias ID: {len(alias_ids)}")

    rows = []
    for aid in alias_ids:
        data = (vault_request("GET", f"identity/alias/id/{aid}").get("data") or {})
        meta = data.get("metadata", {}) or {}
        rows.append({
            "alias_id": data.get("id"),
            "name": data.get("name"),
            "mount_type": data.get("mount_type"),
            "mount_path": data.get("mount_path"),
            "entity_id": data.get("canonical_id"),
            "effective_username": meta.get("effectiveUsername")
                or meta.get("service_account_name")
                or meta.get("name"),
            "namespace": meta.get("service_account_namespace", ""),
        })
    df = pd.DataFrame(rows)
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∞–ª–∏–∞—Å–æ–≤: {len(df)}")

    # –°–≤–æ–¥–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    summary = df["mount_type"].value_counts().reset_index()
    summary.columns = ["auth_type", "users_count"]
    return df, summary

# ============================================================
# üîë 3. –ü–æ–¥—Å—á—ë—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
# ============================================================
def get_vault_token_stats():
    resp = vault_request("LIST", "auth/token/accessors")
    tokens = (resp.get("data") or {}).get("keys", [])
    total = len(tokens)
    print(f"üîë –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {total}")
    df = pd.DataFrame([{"Active Tokens": total}])
    return df

# ============================================================
# üìä 4. –°–±–æ—Ä–∫–∞ Excel-–æ—Ç—á—ë—Ç–∞
# ============================================================
def create_excel_report(df_groups, df_aliases, df_summary, df_tokens):
    output = Path("vault_usage_report.xlsx")
    with pd.ExcelWriter(output, engine="xlsxwriter") as writer:
        df_groups.to_excel(writer, index=False, sheet_name="Vault LDAP Groups")
        df_aliases.to_excel(writer, index=False, sheet_name="Vault Users")
        df_summary.to_excel(writer, index=False, sheet_name="Auth Types Summary")
        df_tokens.to_excel(writer, index=False, sheet_name="Token Stats")
    print(f"\nüìÅ –û—Ç—á—ë—Ç –≥–æ—Ç–æ–≤: {output.resolve()}")

# ============================================================
# üöÄ –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
# ============================================================
def main():
    df_groups, ldap_path = get_vault_ldap_groups()
    df_aliases, df_summary = get_vault_aliases()
    df_tokens = get_vault_token_stats()
    create_excel_report(df_groups, df_aliases, df_summary, df_tokens)

if __name__ == "__main__":
    main()
