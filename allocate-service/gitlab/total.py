import gitlab
import os
from dotenv import load_dotenv
import urllib3
import xlsxwriter
from pathlib import Path

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è SSL (–µ—Å–ª–∏ GitLab —Å —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

GITLAB_URL = os.getenv("GITLAB_URL")
GITLAB_TOKEN = os.getenv("GITLAB_TOKEN")


# ======================
# üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GitLab
# ======================
def get_gitlab_connection(url: str, token: str) -> gitlab.Gitlab:
    """–°–æ–∑–¥–∞—ë—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å GitLab"""
    gl = gitlab.Gitlab(url, private_token=token, ssl_verify=False, timeout=30)
    gl.auth()
    return gl


# ======================
# üë• –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# ======================
def get_users(gl: gitlab.Gitlab):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π GitLab"""
    users = gl.users.list(all=True, iterator=True)
    result = []

    for u in users:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º extern_uid –∏–∑ identities, –µ—Å–ª–∏ –µ—Å—Ç—å
        extern_uid = ""
        identities = getattr(u, "identities", [])
        if identities and isinstance(identities, list):
            extern_uid = ", ".join(
                i.get("extern_uid", "") for i in identities if isinstance(i, dict)
            )

        result.append(
            {
                "id": u.id,
                "username": u.username,
                "email": getattr(u, "email", ""),
                "name": u.name,
                "last_sign_in_at": getattr(u, "last_sign_in_at", ""),
                "last_activity_on": getattr(u, "last_activity_on", ""),
                "extern_uid": extern_uid,
            }
        )

    return result


# ======================
# üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
# ======================
def get_stat(gl: gitlab.Gitlab):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ GitLab (–≤—Å—ë –ø–ª–æ—Å–∫–æ, –±–µ–∑ —Ä–µ–∫—É—Ä—Å–∏–∏)"""
    stats = gl.statistics.get()

    stats_dict = {
        "forks": stats.forks,
        "issues": stats.issues,
        "merge_requests": stats.merge_requests,
        "notes": stats.notes,
        "snippets": stats.snippets,
        "ssh_keys": stats.ssh_keys,
        "milestones": stats.milestones,
        "users": stats.users,
        "projects": stats.projects,
        "groups": stats.groups,
        "active_users": stats.active_users,
    }

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ —á–∏—Å–ª–∞ –≤ int, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
    for k, v in stats_dict.items():
        if isinstance(v, str):
            value = v.replace(",", "").strip()
            if value.isdigit():
                stats_dict[k] = int(value)

    return stats_dict


# ======================
# üìò –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ Excel
# ======================
def write_to_excel(users_data, statistics_data, filename="gitlab_report.xlsx"):
    """–°–æ–∑–¥–∞–Ω–∏–µ Excel-–æ—Ç—á—ë—Ç–∞"""
    filename = str(Path(filename).resolve())
    workbook = xlsxwriter.Workbook(filename)

    header_format = workbook.add_format(
        {"bold": True, "bg_color": "#D3D3D3", "border": 1}
    )
    cell_format = workbook.add_format({"border": 1})

    # --- –õ–∏—Å—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ ---
    users_sheet = workbook.add_worksheet("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
    user_headers = [
        "ID",
        "Username",
        "Email",
        "Name",
        "Last Sign In",
        "Last Activity",
        "Extern UID",
    ]

    for col, header in enumerate(user_headers):
        users_sheet.write(0, col, header, header_format)

    for row, user in enumerate(users_data, start=1):
        users_sheet.write(row, 0, user["id"], cell_format)
        users_sheet.write(row, 1, user["username"], cell_format)
        users_sheet.write(row, 2, user["email"], cell_format)
        users_sheet.write(row, 3, user["name"], cell_format)
        users_sheet.write(row, 4, user["last_sign_in_at"], cell_format)
        users_sheet.write(row, 5, user["last_activity_on"], cell_format)
        users_sheet.write(row, 6, user["extern_uid"], cell_format)

    for col in range(len(user_headers)):
        users_sheet.set_column(col, col, 20)

    # --- –õ–∏—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π ---
    stats_sheet = workbook.add_worksheet("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    stats_sheet.write(0, 0, "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", header_format)
    stats_sheet.write(0, 1, "–ó–Ω–∞—á–µ–Ω–∏–µ", header_format)

    for row, (key, value) in enumerate(statistics_data.items(), start=1):
        stats_sheet.write(row, 0, key.replace("_", " ").title(), cell_format)
        stats_sheet.write(row, 1, value, cell_format)

    stats_sheet.set_column(0, 0, 30)
    stats_sheet.set_column(1, 1, 20)

    workbook.close()
    print(f"‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {filename}")
    return filename


# ======================
# üöÄ –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
# ======================
def main():
    try:
        gl = get_gitlab_connection(GITLAB_URL, GITLAB_TOKEN)
        print("üîó –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GitLab")

        print("üì• –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        users_data = get_users(gl)
        print(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_data)}")

        print("üìà –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        statistics_data = get_stat(gl)
        print("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ GitLab:")
        for k, v in statistics_data.items():
            print(f"  {k}: {v}")

        write_to_excel(users_data, statistics_data)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()
