import gitlab
import os
from dotenv import load_dotenv
import urllib3
import xlsxwriter
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
load_dotenv()

GITLAB_URL = os.getenv("GITLAB_URL")
GITLAB_TOKEN = os.getenv("GITLAB_TOKEN")


# ======================
# üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GitLab
# ======================
def get_gitlab_connection(url: str, token: str) -> gitlab.Gitlab:
    """–°–æ–∑–¥–∞—ë—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å GitLab"""
    gl = gitlab.Gitlab(url, private_token=token, ssl_verify=False, timeout=30)
    gl.auth()
    return gl


# ======================
# üë• –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# ======================
def get_users(gl: gitlab.Gitlab) -> List[Dict[str, Any]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π GitLab"""
    users = gl.users.list(all=True, iterator=True)
    return [
        {
            "id": u.id,
            "username": u.username,
            "email": getattr(u, "email", ""),
            "name": u.name,
            "last_sign_in_at": getattr(u, "last_sign_in_at", ""),
            "last_activity_on": getattr(u, "last_activity_on", ""),
            "identities": ", ".join(map(str, getattr(u, "identities", []) or []))
        }
        for u in users
    ]


# ======================
# üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
# ======================
def flatten_object(obj: Any, prefix: str = "") -> Dict[str, Any]:
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –≤ —Å–ª–æ–≤–∞—Ä—å –ø—Ä–æ—Å—Ç—ã—Ö —Ç–∏–ø–æ–≤"""
    result = {}
    if isinstance(obj, (int, float, str, bool, type(None))):
        return {prefix.strip("_"): obj}

    if hasattr(obj, "__dict__"):
        for k, v in vars(obj).items():
            result.update(flatten_object(v, f"{prefix}_{k}"))
    elif isinstance(obj, dict):
        for k, v in obj.items():
            result.update(flatten_object(v, f"{prefix}_{k}"))
    return result


def get_stat(gl: gitlab.Gitlab) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É GitLab –≤ –≤–∏–¥–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è"""
    stats = gl.statistics.get()
    return flatten_object(stats)


# ======================
# üìò –†–∞–±–æ—Ç–∞ —Å Excel
# ======================
def write_to_excel(users: List[Dict[str, Any]], stats: Dict[str, Any], filename: str = None) -> str:
    """–°–æ–∑–¥–∞—ë—Ç Excel-–æ—Ç—á—ë—Ç"""
    filename = filename or f"gitlab_report_{datetime.now():%Y%m%d_%H%M%S}.xlsx"
    filename = str(Path(filename).resolve())

    workbook = xlsxwriter.Workbook(filename)
    header_fmt = workbook.add_format({'bold': True, 'bg_color': '#D3D3D3', 'border': 1})
    cell_fmt = workbook.add_format({'border': 1})

    # --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ---
    sheet_users = workbook.add_worksheet("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
    headers = ["ID", "Username", "Email", "Name", "Last Sign In", "Last Activity", "Identities"]

    for col, header in enumerate(headers):
        sheet_users.write(0, col, header, header_fmt)

    for row, user in enumerate(users, start=1):
        for col, key in enumerate(["id", "username", "email", "name", "last_sign_in_at", "last_activity_on", "identities"]):
            sheet_users.write(row, col, user.get(key, ""), cell_fmt)

    for col in range(len(headers)):
        sheet_users.set_column(col, col, 20)

    # --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
    sheet_stats = workbook.add_worksheet("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    sheet_stats.write(0, 0, "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", header_fmt)
    sheet_stats.write(0, 1, "–ó–Ω–∞—á–µ–Ω–∏–µ", header_fmt)

    for row, (key, value) in enumerate(stats.items(), start=1):
        sheet_stats.write(row, 0, key.replace("_", " ").title(), cell_fmt)
        sheet_stats.write(row, 1, str(value), cell_fmt)

    sheet_stats.set_column(0, 0, 40)
    sheet_stats.set_column(1, 1, 30)

    workbook.close()
    print(f"‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {filename}")
    return filename


# ======================
# üöÄ –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
# ======================
def main():
    try:
        gl = get_gitlab_connection(GITLAB_URL, GITLAB_TOKEN)
        print("üîó –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GitLab")

        print("üì• –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        users = get_users(gl)
        print(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")

        print("üìà –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        stats = get_stat(gl)
        print(f"–ü–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {len(stats)}")

        write_to_excel(users, stats)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()
