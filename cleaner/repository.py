import os
import logging
import requests
from datetime import datetime, timezone
from dateutil.parser import parse
from collections import defaultdict
from dotenv import load_dotenv
import urllib3

from common import get_matching_rule
from maven import filter_maven_components_to_delete

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
load_dotenv()

USER_NAME = os.getenv("USER_NAME")
PASSWORD = os.getenv("PASSWORD")
BASE_URL = os.getenv("BASE_URL")


# ===== API –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï =====
def get_repository_format(repo_name):
    url = f"{BASE_URL}service/rest/v1/repositories"
    try:
        response = requests.get(
            url, auth=(USER_NAME, PASSWORD), timeout=10, verify=False
        )
        response.raise_for_status()
        for repo in response.json():
            if repo.get("name") == repo_name:
                return repo.get("format")
    except Exception as e:
        logging.error(
            f"[FORMAT] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è {repo_name}: {e}"
        )
    return None


def get_repository_items(repo_name, repo_format):
    items = []
    continuation_token = None
    url = f"{BASE_URL}service/rest/v1/"
    url += "assets" if repo_format == "raw" else "components"

    while True:
        params = {"repository": repo_name}
        if continuation_token:
            params["continuationToken"] = continuation_token
        try:
            response = requests.get(
                url,
                auth=(USER_NAME, PASSWORD),
                params=params,
                timeout=10,
                verify=False,
            )
            response.raise_for_status()
            data = response.json()
            items.extend(data.get("items", []))
            continuation_token = data.get("continuationToken")
            if not continuation_token:
                break
        except Exception as e:
            logging.error(f"[API] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ '{repo_name}': {e}")
            return []
    return items


def convert_raw_assets_to_components(assets):
    components = []
    for asset in assets:
        path = asset.get("path", "")
        if not path or "/" not in path:
            continue
        name = os.path.dirname(path) or "/"  # "/" –µ—Å–ª–∏ —Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ
        version = os.path.basename(path)
        if not version:
            continue
        components.append(
            {
                "id": asset.get("id"),
                "name": name,
                "version": version,
                "assets": [asset],
            }
        )
    return components


def delete_component(
    component_id, component_name, component_version, dry_run, use_asset=False
):
    if dry_run:
        logging.info(
            f"[DELETE] üß™ [DRY_RUN] –ü—Ä–æ–ø—É—â–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ: {component_name}:{component_version} (ID: {component_id})"
        )
        return

    endpoint = "assets" if use_asset else "components"
    url = f"{BASE_URL}service/rest/v1/{endpoint}/{component_id}"
    try:
        response = requests.delete(
            url, auth=(USER_NAME, PASSWORD), timeout=10, verify=False
        )
        response.raise_for_status()
        logging.info(
            f"[DELETE] ‚úÖ –£–¥–∞–ª—ë–Ω: {component_name}:{component_version} (ID: {component_id})"
        )
    except requests.exceptions.HTTPError as e:
        if response.status_code == 404:
            logging.warning(
                f"[DELETE] ‚ö†Ô∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (404): {component_name}:{component_version} (ID: {component_id})"
            )
        else:
            logging.error(f"[DELETE] ‚ùå –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {component_id}: {e}")
    except requests.exceptions.RequestException as e:
        logging.error(f"[DELETE] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {component_id}: {e}")


def filter_components_to_delete(
    components,
    regex_rules,
    no_match_retention,
    no_match_reserved,
    no_match_min_days_since_last_download,
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö –∫ —É–¥–∞–ª–µ–Ω–∏—é.
    –í –∫–∞–∂–¥–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –ø–æ–ª—è:
      - will_delete: True/False
      - delete_reason: –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º (–ø–æ—á–µ–º—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º/—É–¥–∞–ª—è–µ–º)
    """

    now_utc = datetime.now(timezone.utc)
    grouped = defaultdict(list)
    no_match_list = []

    def _days(x):
        """–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å retention/min_days: timedelta -> days int, int -> int, None -> None"""
        if x is None:
            return None
        # timedelta-like
        if hasattr(x, "days"):
            try:
                return int(x.days)
            except Exception:
                pass
        try:
            return int(x)
        except Exception:
            return None

    def _to_int(x):
        if x is None:
            return None
        try:
            return int(x)
        except Exception:
            return None

    # ===== –®–∞–≥ 1: —Å–æ–±–∏—Ä–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ =====
    for component in components:
        version = component.get("version", "")
        name = component.get("name", "")
        assets = component.get("assets", [])
        if not assets or not version or not name:
            continue

        last_modified_strs = [a.get("lastModified") for a in assets if a.get("lastModified")]
        last_download_strs = [a.get("lastDownloaded") for a in assets if a.get("lastDownloaded")]
        if not last_modified_strs:
            continue

        try:
            last_modified = max(parse(s) for s in last_modified_strs)
        except Exception:
            continue

        last_download = None
        if last_download_strs:
            try:
                last_download = max(parse(s) for s in last_download_strs)
            except Exception:
                last_download = None

        component.update({"last_modified": last_modified, "last_download": last_download})

        # –≤–µ—Ä—Å–∏—è "latest" ‚Äî –Ω–µ —É–¥–∞–ª—è–µ–º
        if isinstance(version, str) and version.lower() == "latest":
            component.update({"pattern": "latest", "will_delete": False, "delete_reason": "–≤–µ—Ä—Å–∏—è 'latest' ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º"})
            continue

        # –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–ø–∞–¥–∞—é—â–µ–µ –ø—Ä–∞–≤–∏–ª–æ (–≤–Ω–µ—à–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è). –û–∂–∏–¥–∞–µ–º:
        # pattern, retention, reserved, min_days_since_last_download
        pattern, retention, reserved, min_days = get_matching_rule(
            version,
            regex_rules,
            no_match_retention,
            no_match_reserved,
            no_match_min_days_since_last_download,
        )

        retention_days = _days(retention)
        reserved_count = _to_int(reserved)
        min_days_int = _to_int(min_days)

        component.update(
            {
                "pattern": pattern,
                "retention_days": retention_days,
                "reserved_count": reserved_count,
                "min_days_since_last_download": min_days_int,
            }
        )

        if pattern == "no-match":
            no_match_list.append(component)
        else:
            grouped[(name, pattern)].append(component)

    saved = []
    to_delete = []

    # ===== –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ no-match =====
    if no_match_list:
        # –ï—Å–ª–∏ –¥–ª—è no-match –≤–æ–æ–±—â–µ –Ω–µ—Ç –ø—Ä–∞–≤–∏–ª ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏ —è–≤–Ω–æ —Å–æ–æ–±—â–∞–µ–º
        if (
            no_match_retention is None
            and no_match_reserved is None
            and no_match_min_days_since_last_download is None
        ):
            for comp in no_match_list:
                comp["will_delete"] = False
                comp["delete_reason"] = "–Ω–µ—Ç –ø—Ä–∞–≤–∏–ª no-match ‚Üí —Å–æ—Ö—Ä–∞–Ω—è–µ–º"
                saved.append(comp)
        else:
            sorted_no_match = sorted(no_match_list, key=lambda x: x["last_modified"], reverse=True)
            # –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞, –Ω–æ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç ‚Äî –±–µ—Ä—ë–º –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
            for i, comp in enumerate(sorted_no_match):
                age = now_utc - comp["last_modified"]
                last_download = comp.get("last_download")
                retention_days = comp.get("retention_days")
                reserved_count = comp.get("reserved_count") or 0
                min_days = comp.get("min_days_since_last_download")

                # 1) reserved
                if reserved_count and i < reserved_count:
                    comp["will_delete"] = False
                    comp["delete_reason"] = f"–∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω (–ø–æ–∑–∏—Ü–∏—è {i+1}/{reserved_count}, no-match)"
                    saved.append(comp)
                    continue

                # 2) retention (–≤–æ–∑—Ä–∞—Å—Ç)
                if retention_days is not None and age.days <= retention_days:
                    comp["will_delete"] = False
                    comp["delete_reason"] = f"—Å–≤–µ–∂–∏–π (–≤–æ–∑—Ä–∞—Å—Ç {age.days} –¥–Ω. ‚â§ {retention_days} –¥–Ω., no-match)"
                    saved.append(comp)
                    continue

                # 3) last download
                if min_days is not None and last_download:
                    days_since_dl = (now_utc - last_download).days
                    if days_since_dl <= min_days:
                        comp["will_delete"] = False
                        comp["delete_reason"] = f"–Ω–µ–¥–∞–≤–Ω–æ —Å–∫–∞—á–∏–≤–∞–ª–∏ ({days_since_dl} –¥–Ω. ‚â§ {min_days} –¥–Ω., no-match)"
                        saved.append(comp)
                        continue

                # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ ‚Äî —Å–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –ø—Ä–∏—á–∏–Ω—É —É–¥–∞–ª–µ–Ω–∏—è
                failures = []
                if reserved_count:
                    failures.append(f"–ø–æ–∑–∏—Ü–∏—è {i+1} > reserved {reserved_count}")
                if retention_days is not None:
                    failures.append(f"–≤–æ–∑—Ä–∞—Å—Ç {age.days} –¥–Ω. > retention {retention_days} –¥–Ω.")
                if min_days is not None:
                    if last_download:
                        failures.append(f"–ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ {(now_utc - last_download).days} –¥–Ω. > min_days {min_days} –¥–Ω.")
                    else:
                        failures.append(f"–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ (—Ç—Ä–µ–±—É–µ—Ç—Å—è min_days={min_days} –¥–Ω.)")

                if not failures:
                    # —Ä–µ–¥–∫–∏–π –∫–µ–π—Å: –Ω–µ—Ç —É—Å–ª–æ–≤–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ‚Üí —è–≤–Ω–æ –ø–∏—à–µ–º
                    reason = "–Ω–µ—Ç —É—Å–ª–æ–≤–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (no-match) ‚Üí —É–¥–∞–ª—è–µ–º"
                else:
                    reason = "—É–¥–∞–ª—è–µ—Ç—Å—è –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º no-match: " + "; ".join(failures)

                comp["will_delete"] = True
                comp["delete_reason"] = reason
                to_delete.append(comp)

    # ===== –®–∞–≥ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –≥—Ä—É–ø–ø (pattern != no-match) =====
    for (name, pattern), group in grouped.items():
        sorted_group = sorted(group, key=lambda x: x["last_modified"], reverse=True)
        for i, comp in enumerate(sorted_group):
            age = now_utc - comp["last_modified"]
            last_download = comp.get("last_download")
            retention_days = comp.get("retention_days")
            reserved_count = comp.get("reserved_count") or 0
            min_days = comp.get("min_days_since_last_download")

            # 1) reserved
            if reserved_count and i < reserved_count:
                comp["will_delete"] = False
                comp["delete_reason"] = f"–∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω (–ø–æ–∑–∏—Ü–∏—è {i+1}/{reserved_count}, –ø—Ä–∞–≤–∏–ª–æ '{pattern}')"
                saved.append(comp)
                continue

            # 2) retention
            if retention_days is not None and age.days <= retention_days:
                comp["will_delete"] = False
                comp["delete_reason"] = f"—Å–≤–µ–∂–∏–π (–≤–æ–∑—Ä–∞—Å—Ç {age.days} –¥–Ω. ‚â§ {retention_days} –¥–Ω., –ø—Ä–∞–≤–∏–ª–æ '{pattern}')"
                saved.append(comp)
                continue

            # 3) last download
            if min_days is not None and last_download:
                days_since_dl = (now_utc - last_download).days
                if days_since_dl <= min_days:
                    comp["will_delete"] = False
                    comp["delete_reason"] = f"–Ω–µ–¥–∞–≤–Ω–æ —Å–∫–∞—á–∏–≤–∞–ª–∏ ({days_since_dl} –¥–Ω. ‚â§ {min_days} –¥–Ω., –ø—Ä–∞–≤–∏–ª–æ '{pattern}')"
                    saved.append(comp)
                    continue

            # –ù–µ –ø–æ–¥–æ—à—ë–ª –Ω–∏ –æ–¥–∏–Ω –∫—Ä–∏—Ç–µ—Ä–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ‚Üí —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –ø—Ä–∏—á–∏–Ω—É —É–¥–∞–ª–µ–Ω–∏—è
            failures = []
            if reserved_count:
                failures.append(f"–ø–æ–∑–∏—Ü–∏—è {i+1} > reserved {reserved_count}")
            if retention_days is not None:
                failures.append(f"–≤–æ–∑—Ä–∞—Å—Ç {age.days} –¥–Ω. > retention {retention_days} –¥–Ω.")
            if min_days is not None:
                if last_download:
                    failures.append(f"–ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ {(now_utc - last_download).days} –¥–Ω. > min_days {min_days} –¥–Ω.")
                else:
                    failures.append(f"–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ (—Ç—Ä–µ–±—É–µ—Ç—Å—è min_days={min_days} –¥–Ω.)")

            if not failures:
                reason = f"–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∞–≤–∏–ª—É '{pattern}' ‚Üí —É–¥–∞–ª—è–µ–º"
            else:
                reason = f"—É–¥–∞–ª—è–µ—Ç—Å—è –ø–æ –ø—Ä–∞–≤–∏–ª—É '{pattern}': " + "; ".join(failures)

            comp["will_delete"] = True
            comp["delete_reason"] = reason
            to_delete.append(comp)

    # ===== –®–∞–≥ 4: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ =====
    for comp in saved:
        full_path = os.path.join(comp["name"], comp.get("version", "–ë–µ–∑ –≤–µ—Ä—Å–∏–∏")).replace("\\", "/")
        logging.info(f" ‚úÖ –°–æ—Ö—Ä–∞–Ω—ë–Ω: {full_path} | –ø—Ä–∏—á–∏–Ω–∞: {comp.get('delete_reason')}")

    for comp in to_delete:
        full_path = os.path.join(comp["name"], comp.get("version", "–ë–µ–∑ –≤–µ—Ä—Å–∏–∏")).replace("\\", "/")
        logging.info(f" üóë –£–¥–∞–ª–µ–Ω–∏–µ: {full_path} | –ø—Ä–∏—á–∏–Ω–∞: {comp.get('delete_reason')}")

    logging.info(f" üßπ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫ —É–¥–∞–ª–µ–Ω–∏—é: {len(to_delete)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç(–æ–≤)")

    return to_delete




# ===== –û–ß–ò–°–¢–ö–ê –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø =====
def clear_repository(repo_name, cfg):
    logging.info(f"\nüîÑ –ù–∞—á–∞–ª–æ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {repo_name}")

    repo_format = get_repository_format(repo_name)
    if not repo_format:
        logging.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π '{repo_name}' ‚Äî –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        return

    if repo_format not in ["raw", "docker", "maven2"]:
        logging.warning(
            f"‚ö†Ô∏è –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π '{repo_name}' –∏–º–µ–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç '{repo_format}' –∏ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω"
        )
        return

    items = get_repository_items(repo_name, repo_format)
    if not items:
        logging.info(f"‚ÑπÔ∏è –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π '{repo_name}' –ø—É—Å—Ç")
        return

    if repo_format == "raw":
        components = convert_raw_assets_to_components(items)
        to_delete = filter_components_to_delete(
            components,
            regex_rules=cfg.get("regex_rules", {}),
            no_match_retention=cfg.get("no_match_retention_days"),
            no_match_reserved=cfg.get("no_match_reserved", None),
            no_match_min_days_since_last_download=cfg.get(
                "no_match_min_days_since_last_download", None
            ),
        )
    elif repo_format == "maven2":
        components = items
        to_delete = filter_maven_components_to_delete(
            components, cfg.get("maven_rules", {})
        )
    else:  # docker
        components = items
        to_delete = filter_components_to_delete(
            components,
            regex_rules=cfg.get("regex_rules", {}),
            no_match_retention=cfg.get("no_match_retention_days"),
            no_match_reserved=cfg.get("no_match_reserved", None),
            no_match_min_days_since_last_download=cfg.get(
                "no_match_min_days_since_last_download", None
            ),
        )

    if not to_delete:
        logging.info(f"‚úÖ –ù–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ '{repo_name}'")
        return

    logging.info(f"üöÆ –£–¥–∞–ª–µ–Ω–∏–µ {len(to_delete)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç(–æ–≤)...")
    for component in to_delete:
        delete_component(
            component["id"],
            component.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏"),
            component.get("version", "–ë–µ–∑ –≤–µ—Ä—Å–∏–∏"),
            cfg.get("dry_run", False),
            use_asset=(repo_format == "raw"),
        )
