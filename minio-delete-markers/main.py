import os
import logging
from logging.handlers import TimedRotatingFileHandler
from minio import Minio
from minio.error import S3Error
from minio.commonconfig import ENABLED
from minio.lifecycleconfig import (
    LifecycleConfig,
    Rule,
    Expiration,
    NoncurrentVersionExpiration,
)
from dotenv import load_dotenv


"""
C–∫—Ä–∏–ø—Ç –∑–∞–¥–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É 
mc ilm add minio1/example --noncurrent-expire-days 1 --expire-delete-marker
"""

log_filename = os.path.join(
    os.path.dirname(__file__), "logs", "minio-delete-markers.log"
)
os.makedirs(os.path.dirname(log_filename), exist_ok=True)

file_handler = TimedRotatingFileHandler(
    log_filename, when="midnight", interval=1, backupCount=7, encoding="utf-8"
)

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[file_handler, logging.StreamHandler()],
)


load_dotenv()

MINIO_ENDPOINT = os.getenv("MINIO_ENDPOINT")
ACCESS_KEY = os.getenv("ACCESS_KEY")
SECRET_KEY = os.getenv("SECRET_KEY")
PREFIX = os.getenv("PREFIX", None)
DRY_RUN = os.getenv("DRY_RUN", "true").lower() == "true"


if MINIO_ENDPOINT is None or ACCESS_KEY is None or SECRET_KEY is None:
    logging.error(
        f"üí• MINIO_ENDPOINT, ACCESS_KEY, SECRET_KEY must be set {100 * '='}\n"
    )
    exit(1)


client = Minio(
    MINIO_ENDPOINT,
    access_key=ACCESS_KEY,
    secret_key=SECRET_KEY,
    secure=False,
)


def check_and_fix_lifecycle(bucket_name: str):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è delete markers –∏/–∏–ª–∏ noncurrent –≤–µ—Ä—Å–∏–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç."""
    if PREFIX and not bucket_name.startswith(PREFIX):
        logging.info(
            f"‚è≠ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–∞–∫–µ—Ç {bucket_name} ‚Äî –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å—É {PREFIX}"
        )
        return
    logging.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞–∫–µ—Ç {bucket_name}")

    try:
        policy = client.get_bucket_lifecycle(bucket_name)
    except S3Error as e:
        if e.code == "NoSuchLifecycleConfiguration":
            policy = None
        else:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ lifecycle –¥–ª—è {bucket_name}: {e}")
            return

    # –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    if not policy:
        lifecycle = LifecycleConfig([])
    elif isinstance(policy, LifecycleConfig):
        lifecycle = policy
    else:
        lifecycle = LifecycleConfig.fromxml(policy.decode("utf-8"))

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–∞–≤–∏–ª–∞
    has_delete_marker_rule = any(
        getattr(rule.expiration, "expired_object_delete_marker", False)
        for rule in lifecycle.rules
        if rule.status == ENABLED
    )
    has_noncurrent_rule = any(
        getattr(rule.noncurrent_version_expiration, "noncurrent_days", None) == 1
        for rule in lifecycle.rules
        if rule.status == ENABLED
    )

    if has_delete_marker_rule and has_noncurrent_rule:
        logging.info(f"‚ÑπÔ∏è {bucket_name}: –Ω—É–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        return

    logging.warning(f"‚ö†Ô∏è {bucket_name}: lifecycle –ø—Ä–∞–≤–∏–ª–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω–æ–µ")

    if DRY_RUN:
        logging.info(f"üß™ [DRY RUN] –î–æ–±–∞–≤–∏–ª –±—ã lifecycle –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è {bucket_name}")
        return

    logging.info(f"üîß –î–æ–±–∞–≤–ª—è—é missing –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è {bucket_name}")

    # —Å–æ–∑–¥–∞—ë–º rule —Ç–æ–ª—å–∫–æ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    expiration = (
        Expiration(days=0, expired_object_delete_marker=True)
        if not has_delete_marker_rule
        else None
    )
    noncurrent_exp = (
        NoncurrentVersionExpiration(noncurrent_days=1)
        if not has_noncurrent_rule
        else None
    )

    rule = Rule(
        status=ENABLED,
        expiration=expiration,
        noncurrent_version_expiration=noncurrent_exp,
    )

    lifecycle.rules.append(rule)
    client.set_bucket_lifecycle(bucket_name, lifecycle)
    logging.info(f"‚úÖ Lifecycle –ø—Ä–∞–≤–∏–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ {bucket_name}")


def main():
    buckets = [b.name for b in client.list_buckets()]
    logging.info(f"–ù–∞–π–¥–µ–Ω–æ –±–∞–∫–µ—Ç–æ–≤: {len(buckets)}")
    logging.info(
        f"–†–µ–∂–∏–º: {'üß™ DRY-RUN (—Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞)' if DRY_RUN else 'LIVE (–≤–Ω–æ—Å—è—Ç—Å—è –∏–∑–º–µ–Ω–µ–Ω–∏—è)'}"
    )

    for b in buckets:
        check_and_fix_lifecycle(b)


if __name__ == "__main__":
    main()
    logging.info(f"üßæ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ {100 * '='}\n")
