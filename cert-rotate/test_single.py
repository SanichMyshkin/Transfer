import requests
import urllib3
from urllib.parse import urlparse
from requests.exceptions import RequestException
from dotenv import load_dotenv
import logging
import os

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

HEADERS = {
    "User-Agent": (
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 "
        "(KHTML, like Gecko) Chrome/120 Safari/537.36"
    )
}

# --- SSL/Cert config ---
NEXUS_CERT = os.getenv("NEXUS_CERT")  # –ø—É—Ç—å –¥–æ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ CA/cert
VERIFY = NEXUS_CERT if NEXUS_CERT else False

session = requests.Session()
adapter = requests.adapters.HTTPAdapter(max_retries=0)
session.mount("https://", adapter)
session.mount("http://", adapter)


def safe_get_json(url: str, auth: tuple, timeout: int = 20):
    try:
        response = session.get(
            url, auth=auth, headers=HEADERS, timeout=timeout, verify=VERIFY
        )
        if response.status_code == 400:
            logging.warning(f"‚ùó Nexus –≤–µ—Ä–Ω—É–ª 400 Bad Request –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {url}")
            return []
        response.raise_for_status()
        return response.json()
    except RequestException as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {url}: {e}")
        return []


def get_from_nexus(nexus_url: str, endpoint: str, auth: tuple, timeout: int = 20):
    full_url = f"{nexus_url.rstrip('/')}/service/rest/v1/{endpoint.lstrip('/')}"
    return safe_get_json(full_url, auth, timeout)


def fetch_remote_cert(nexus_url: str, remote_url: str, auth: tuple):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ URL"""
    parsed = urlparse(remote_url)
    host = parsed.hostname
    if not host or parsed.scheme != "https":
        logging.info(f"‚è≠Ô∏è {remote_url} –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç HTTPS")
        return None
    
    port = parsed.port or 443
    endpoint = f"security/ssl?host={host}&port={port}"
    certs = get_from_nexus(nexus_url, endpoint, auth)
    
    if isinstance(certs, dict):
        return certs
    elif isinstance(certs, list) and len(certs) > 0:
        return certs[0]  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
    return None


def add_cert_to_truststore(
    nexus_url: str, auth: tuple, pem: str, cn: str, remote: str
):
    """–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤ truststore"""
    try:
        resp = requests.post(
            f"{nexus_url}/service/rest/v1/security/ssl/truststore",
            auth=auth,
            headers={"Content-Type": "application/json"},
            json={"certificate": pem},
            timeout=10,
            verify=VERIFY,
        )
        if resp.status_code == 400:
            logging.warning(
                f"üîÑ JSON-–≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è CN='{cn}', –ø—Ä–æ–±—É–µ–º raw PEM"
            )
            resp = requests.post(
                f"{nexus_url}/service/rest/v1/security/ssl/truststore",
                auth=auth,
                headers={"Content-Type": "application/x-pem-file"},
                data=pem.encode(),
                timeout=10,
                verify=VERIFY,
            )
        if resp.status_code == 409:
            logging.info(f"üîí –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç CN='{cn}' —É–∂–µ –µ—Å—Ç—å –¥–ª—è {remote}")
            return False
        resp.raise_for_status()
        logging.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω CN='{cn}' –¥–ª—è {remote}")
        return True
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ CN='{cn}' –¥–ª—è {remote}: {e}")
        return False


def add_single_cert_from_url(nexus_url: str, auth: tuple, target_url: str):
    """–î–æ–±–∞–≤–∏—Ç—å –æ–¥–∏–Ω —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É URL"""
    logging.info(f"üîç –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è URL: {target_url}")
    
    remote_cert = fetch_remote_cert(nexus_url, target_url, auth)
    if not remote_cert:
        logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è {target_url}")
        return False
    
    remote_cn = remote_cert.get("subjectCommonName")
    pem = remote_cert.get("pem")
    if not remote_cn or not pem:
        logging.error(f"‚ùå –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–ª—è {target_url}")
        return False
    
    logging.info(f"‚ûï –ü—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å CN='{remote_cn}' –¥–ª—è {target_url}")
    return add_cert_to_truststore(nexus_url, auth, pem, remote_cn, target_url)


if __name__ == "__main__":
    load_dotenv()
    NEXUS_URL = os.getenv("NEXUS_URL")
    NEXUS_USER = os.getenv("NEXUS_USER")
    NEXUS_PASS = os.getenv("NEXUS_PASS")
    TARGET_URL = os.getenv("TARGET_URL")
    
    if not TARGET_URL:
        logging.error("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TARGET_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        logging.info("üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TARGET_URL=https://example.com:port")
        exit(1)
    
    if not all([NEXUS_URL, NEXUS_USER, NEXUS_PASS]):
        logging.error("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: NEXUS_URL, NEXUS_USER, NEXUS_PASS")
        exit(1)
    
    auth = (NEXUS_USER, NEXUS_PASS)
    
    logging.info(f"üöÄ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è URL: {TARGET_URL}")
    success = add_single_cert_from_url(NEXUS_URL, auth, TARGET_URL)
    
    if success:
        logging.info("‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
    else:
        logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç")
        exit(1)