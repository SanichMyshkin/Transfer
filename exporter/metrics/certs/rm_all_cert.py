import requests
from common.logs import logging
from metrics.utils.api import get_from_nexus


def drop_all_certs(nexus_url: str, auth: tuple):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏–∑ truststore Nexus."""
    try:
        truststore = get_from_nexus(nexus_url, "security/ssl/truststore", auth) or []
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ truststore: {e}")
        return

    if not truststore:
        logging.info("‚úÖ Truststore –ø—É—Å—Ç ‚Äî —É–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ")
        return

    logging.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(truststore)} —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –≤ truststore")

    for cert in truststore:
        cert_id = cert.get("id")
        cn = cert.get("subjectCommonName", "???")

        if not cert_id:
            logging.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –±–µ–∑ id (CN='{cn}')")
            continue

        try:
            resp = requests.delete(
                f"{nexus_url}service/rest/v1/security/ssl/truststore/{cert_id}",
                auth=auth,
                timeout=10,
            )
            resp.raise_for_status()
            logging.info(f"üóëÔ∏è –£–¥–∞–ª—ë–Ω —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç CN='{cn}', ID='{cert_id}'")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ CN='{cn}', ID='{cert_id}': {e}")

    logging.info("‚úîÔ∏è –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
