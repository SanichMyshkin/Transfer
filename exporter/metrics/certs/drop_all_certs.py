import os
import requests
import urllib3
from requests.exceptions import SSLError, RequestException, ConnectionError
import logging

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)

HEADERS = {
    "User-Agent": (
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 "
        "(KHTML, like Gecko) Chrome/120 Safari/537.36"
    )
}

session = requests.Session()
adapter = requests.adapters.HTTPAdapter(max_retries=0)
session.mount("https://", adapter)
session.mount("http://", adapter)


def safe_get_json(url: str, auth: tuple, timeout: int = 20):
    try:
        response = session.get(
            url, auth=auth, headers=HEADERS, timeout=timeout, verify=True
        )
        response.raise_for_status()
        return response.json()
    except SSLError as ssl_err:
        logging.warning(f"‚ö†Ô∏è SSL –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {url}: {ssl_err}")
        try:
            response = session.get(
                url, auth=auth, headers=HEADERS, timeout=timeout, verify=False
            )
            logging.warning(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω verify=False –¥–ª—è {url}")
            response.raise_for_status()
            return response.json()
        except RequestException as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ verify: {e}")
            return []
    except (ConnectionError, RequestException) as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {url}: {e}")
        return []


def get_from_nexus(nexus_url: str, endpoint: str, auth: tuple, timeout: int = 20):
    full_url = f"{nexus_url.rstrip('/')}/service/rest/v1/{endpoint.lstrip('/')}"
    return safe_get_json(full_url, auth, timeout)


def drop_all_certs(nexus_url: str, auth: tuple):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏–∑ truststore Nexus."""
    try:
        truststore = get_from_nexus(nexus_url, "security/ssl/truststore", auth) or []
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ truststore: {e}")
        return

    if not truststore:
        logging.info("‚úÖ Truststore –ø—É—Å—Ç ‚Äî —É–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ")
        return

    logging.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(truststore)} —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –≤ truststore")

    for cert in truststore:
        cert_id = cert.get("id")
        cn = cert.get("subjectCommonName", "???")

        if not cert_id:
            logging.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –±–µ–∑ id (CN='{cn}')")
            continue

        try:
            resp = requests.delete(
                f"{nexus_url.rstrip('/')}/service/rest/v1/security/ssl/truststore/{cert_id}",
                auth=auth,
                timeout=10,
                verify=False,  # —á—Ç–æ–±—ã –Ω–µ —É–ø–∞–ª–æ –Ω–∞ SSL
            )
            resp.raise_for_status()
            logging.info(f"üóëÔ∏è –£–¥–∞–ª—ë–Ω —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç CN='{cn}', ID='{cert_id}'")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ CN='{cn}', ID='{cert_id}': {e}")

    logging.info("‚úîÔ∏è –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")


if __name__ == "__main__":
    NEXUS_URL = os.getenv("NEXUS_URL", "https://nexus.sanich.tech:8443")
    NEXUS_USER = os.getenv("NEXUS_USER", "admin")
    NEXUS_PASS = os.getenv("NEXUS_PASS", "admin123")

    drop_all_certs(NEXUS_URL, (NEXUS_USER, NEXUS_PASS))
