from common.logs import logging
from prometheus_client import Gauge
from metrics.utils.api import get_from_nexus
from database.cleanup_query import fetch_cleanup_name


# –ú–µ—Ç—Ä–∏–∫–∞: 1 ‚Äî –ø–æ–ª–∏—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, 0 ‚Äî –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
nexus_cleanup_policy_usage_gauge = Gauge(
    "nexus_cleanup_policy_used",
    "Nexus cleanup policy usage status (1 = used, 0 = unused)",
    ["policy_name"]
)


def fetch_cleanup_policy_usage(api_url: str, auth: tuple):
    """
    –°–æ–±–∏—Ä–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª–∏—Ç–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –≤ Nexus, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫–∏–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è,
    –∏ –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ Prometheus.
    
    :param api_url: URL API Nexus
    :param auth: –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (tuple)
    """
    repository_settings = get_from_nexus(api_url, "repositorySettings", auth)
    used_policies = []

    # –°–±–æ—Ä –≤—Å–µ—Ö –ø–æ–ª–∏—Ç–∏–∫, —Ä–µ–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö
    for repo in repository_settings or []:
        repo_name = repo.get("name") or repo.get("repositoryName") or "<unknown>"
        cleanup_data = repo.get("cleanup") or {}
        policy_names = cleanup_data.get("policyNames") or []

        if policy_names:
            logging.info("[‚úÖ] –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π %s –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ–ª–∏—Ç–∏–∫–∏: %s", repo_name, ", ".join(policy_names))
            used_policies.extend(policy_names)
        else:
            logging.info("[‚ûñ] –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π %s ‚Äî –ø–æ–ª–∏—Ç–∏–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã", repo_name)

    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫
    unique_used_policies = list(dict.fromkeys(used_policies))
    logging.info(
        "–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª–∏—Ç–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è: %s",
        ", ".join(unique_used_policies) if unique_used_policies else "‚Äî"
    )

    # –í—Å–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –∏–∑ –±–∞–∑—ã ‚Äî –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–∞–º, –µ—Å–ª–∏ fetch_cleanup_name() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂–∏
    all_policies = [p[0] if isinstance(p, tuple) else str(p) for p in fetch_cleanup_name()]
    logging.info("–í—Å–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –∏–∑ –±–∞–∑—ã: %s", ", ".join(all_policies) if all_policies else "‚Äî")

    # üîπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –Ω–æ–≤—ã—Ö
    nexus_cleanup_policy_usage_gauge.clear()

    # –í—ã—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏ –ª–æ–≥–∏—Ä—É–µ–º —Å–º–∞–π–ª–∏–∫–∞–º–∏
    for policy in all_policies:
        is_used = 1 if policy in unique_used_policies else 0
        nexus_cleanup_policy_usage_gauge.labels(policy_name=policy).set(is_used)

        # –í—ã–≤–æ–¥–∏–º –≤ –ª–æ–≥ —Å–º–∞–π–ª–∏–∫ –≤–º–µ—Å—Ç–æ 0/1
        log_symbol = "‚úÖ" if is_used else "‚ùå"
        logging.info("[üìä] –ü–æ–ª–∏—Ç–∏–∫–∞ '%s' -> %s", policy, log_symbol)

    return unique_used_policies
