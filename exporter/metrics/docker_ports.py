import logging
from prometheus_client import Gauge

from database.ports_query import fetch_docker_ports


logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(module)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ú–µ—Ç—Ä–∏–∫–∞ Prometheus
docker_repo_port_gauge = Gauge(
    "docker_repository_port_info",
    "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Ä—Ç–∞—Ö –∏ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–∞—Ö docker-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ Nexus",
    ["repository_name", "http_port", "remote_url", "repo_type"],
)


def fetch_docker_ports_metrics() -> None:
    try:
        result = fetch_docker_ports()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö docker-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: {e}")
        logger.warning("‚ö†Ô∏è –ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞.")
        return

    if not result:
        logger.warning(
            "üö´ –ù–µ –ø–æ–ª—É—á–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ docker-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. "
            "–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, Nexus –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –±–∞–∑–∞ –ø—É—Å—Ç–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫."
        )
        return

    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(result)} docker-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
    docker_repo_port_gauge.clear()

    for entry in result:
        repo_name = entry.get("repository_name", "unknown")
        http_port = entry.get("http_port")
        remote_url = entry.get("remote_url", "")

        logger.info(
            f"üì¶ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {repo_name} | üåê –ü–æ—Ä—Ç: {http_port} | üîó –£–¥–∞–ª—ë–Ω–Ω—ã–π URL: {remote_url or '‚Äî'}"
        )

        docker_repo_port_gauge.labels(
            repository_name=repo_name,
            http_port=str(http_port) if http_port is not None else "None",
            remote_url=remote_url if remote_url else "None",
            repo_type="Proxy" if remote_url else "Hosted",
        ).set(1)

    logger.info("‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ –ø–æ—Ä—Ç–∞–º docker-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
