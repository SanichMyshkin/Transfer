import gitlab
import yaml
import logging
import urllib3
from io import StringIO
from typing import Dict

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    )
    return logging.getLogger(__name__)


def get_external_policies(
    gitlab_url: str,
    gitlab_token: str,
    gitlab_branch: str,
    target_path: str = "nexus/cleaner",
) -> Dict[str, str]:  # –¢–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–ª–æ–≤–∞—Ä—å
    logger = setup_logging()

    result = {}  # {'repo_name': 'gitlab_url'}
    files_processed = 0
    repos_found = 0

    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GitLab
        gl = gitlab.Gitlab(gitlab_url, private_token=gitlab_token, ssl_verify=False)
        gl.auth()
        logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ GitLab: {gitlab_url}")
        logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ö–æ–¥ –ø—Ä–æ–µ–∫—Ç–æ–≤...")

        # –û–±—Ö–æ–¥ –ø—Ä–æ–µ–∫—Ç–æ–≤
        projects = gl.projects.list(all=True)

        for project in projects:
            try:
                items = project.repository_tree(path=target_path, recursive=True)
                yaml_files = [
                    item
                    for item in items
                    if item["type"] == "blob"
                    and item["name"].endswith((".yml", ".yaml"))
                ]

                if not yaml_files:
                    continue

                logger.info(
                    f"üìÅ –ü—Ä–æ–µ–∫—Ç {project.path_with_namespace}: –Ω–∞–π–¥–µ–Ω–æ {len(yaml_files)} yaml-—Ñ–∞–π–ª–æ–≤"
                )

                for file in yaml_files:
                    file_path = file["path"]
                    try:
                        f = project.files.get(file_path=file_path, ref=gitlab_branch)
                        content = f.decode().decode("utf-8")
                        data = yaml.safe_load(StringIO(content))
                        files_processed += 1

                        if isinstance(data, dict) and "repo_names" in data:
                            for repo_name in data["repo_names"]:
                                link = f"{gitlab_url}/{project.path_with_namespace}/-/blob/{gitlab_branch}/{file_path}"

                                if repo_name in result:
                                    logger.warning(
                                        f"‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä: '{repo_name}' —É–∂–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ. "
                                        f"–ù–æ–≤—ã–π —Ñ–∞–π–ª: {link}"
                                    )
                                else:
                                    result[repo_name] = link
                                    repos_found += 1

                    except Exception as e:
                        logger.error(
                            f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path} –≤ {project.path_with_namespace}: {e}"
                        )

            except gitlab.exceptions.GitlabGetError:
                logger.info(
                    f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ {project.path_with_namespace}: –ø—É—Ç—å '{target_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω."
                )
                continue

        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        logger.info(f"üìÑ –í—Å–µ–≥–æ yaml-—Ñ–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {files_processed}")
        logger.info(f"üì¶ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö repo_names –Ω–∞–π–¥–µ–Ω–æ: {len(result)}")

        return result  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–ª–æ–≤–∞—Ä—å

    except Exception as e:
        logger.error(f"‚õî –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å GitLab: {e}")
        raise
