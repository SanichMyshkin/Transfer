import gitlab
import yaml
from common.logs import logging
import urllib3
from io import StringIO
from typing import Dict

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


def get_gitlab_connection(gitlab_url: str, gitlab_token: str) -> gitlab.Gitlab:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GitLab"""
    gl = gitlab.Gitlab(gitlab_url, private_token=gitlab_token, ssl_verify=False)
    gl.auth()
    return gl


def process_yaml_file(
    project, file_info: Dict, branch: str, result: Dict, gitlab_url: str
) -> bool:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ YAML —Ñ–∞–π–ª–∞"""
    file_path = file_info["path"]
    try:
        file_content = (
            project.files.get(file_path=file_path, ref=branch).decode().decode("utf-8")
        )
        data = yaml.safe_load(StringIO(file_content))

        if not isinstance(data, dict) or "repo_names" not in data:
            return False

        file_link = (
            f"{gitlab_url}/{project.path_with_namespace}/-/blob/{branch}/{file_path}"
        )

        for repo_name in data["repo_names"]:
            if repo_name in result:
                logging.warning(
                    f"‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä: '{repo_name}' —É–∂–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω. –§–∞–π–ª: {file_link}"
                )
            else:
                result[repo_name] = file_link
        return True

    except Exception as e:
        logging.error(
            f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ {file_path} ({project.path_with_namespace}): {str(e)}"
        )
        return False


def scan_project_for_policies(
    project, branch: str, target_path: str, gitlab_url: str
) -> Dict:
    """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–∏—Ç–∏–∫"""
    result = {}
    try:
        items = project.repository_tree(path=target_path, recursive=True, ref=branch)
        yaml_files = [
            item
            for item in items
            if item["type"] == "blob" and item["name"].endswith((".yml", ".yaml"))
        ]

        if not yaml_files:
            logging.debug(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ {project.path_with_namespace}: –Ω–µ—Ç YAML —Ñ–∞–π–ª–æ–≤")
            return result

        logging.info(
            f"üìÅ –ü—Ä–æ–µ–∫—Ç {project.path_with_namespace}: –Ω–∞–π–¥–µ–Ω–æ {len(yaml_files)} —Ñ–∞–π–ª–æ–≤"
        )

        for file in yaml_files:
            if process_yaml_file(project, file, branch, result, gitlab_url):
                logging.debug(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω: {file['path']}")

    except gitlab.exceptions.GitlabGetError:
        logging.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ {project.path_with_namespace}: –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ {project.path_with_namespace}: {str(e)}")

    return result


# def get_external_policies(
#     gitlab_url: str,
#     gitlab_token: str,
#     gitlab_branch: str,
#     target_path: str = "nexus/cleaner",
# ) -> Dict[str, str]:
#     """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö –ø–æ–ª–∏—Ç–∏–∫ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)"""
#     logging.info(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GitLab: {gitlab_url}")

#     final_result = {}
#     total_files = 0
#     total_repos = 0

#     try:
#         gl = get_gitlab_connection(gitlab_url, gitlab_token)
#         logging.info("üîç –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤...")

#         for project in gl.projects.list(all=True, iterator=True):
#             project_result = scan_project_for_policies(
#                 project, gitlab_branch, target_path, gitlab_url
#             )
#             total_files += len(project_result)
#             total_repos += sum(1 for repo in project_result if repo not in final_result)
#             final_result.update(project_result)

#         logging.info(
#             f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_files}, —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: {len(final_result)}"
#         )
#         return final_result

#     except Exception as e:
#         logging.error(f"‚õî –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
#         raise


def get_external_policies(
    gitlab_url: str,
    gitlab_token: str,
    gitlab_branch: str,
    target_path: str = "nexus/cleaner",
) -> Dict[str, str]:
    return {
        "dckr": "https://gitlab.example.com/team/configs/-/blob/master/nexus/cleaner/policy1.yaml",
        "docker": "https://gitlab.example.com/team/configs/-/blob/master/nexus/cleaner/policy2.yaml",
        "nexus-repo-3": "https://gitlab.example.com/devops/cleanup/-/blob/master/nexus/cleaner/policy3.yml",
    }


def get_gitlab_file_content(
    gitlab_url: str = None,
    gitlab_token: str = None,
    gl: gitlab.Gitlab = None,
    project_path: str = "sre-platfom-support/nexus-15562",
    file_path: str = None,
    branch: str = "master",
) -> str:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑ GitLab

    Args:
        gitlab_url: URL GitLab (–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω gl)
        gitlab_token: –¢–æ–∫–µ–Ω GitLab (–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω gl)
        gl: –°—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GitLab
        project_path: –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É (namespace/project)
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        branch: –í–µ—Ç–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞

    Returns:
        –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
    """
    if not file_path:
        logging.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É")
        return ""

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
        if gl is None:
            if not gitlab_url or not gitlab_token:
                logging.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã URL –∏–ª–∏ —Ç–æ–∫–µ–Ω GitLab")
                return ""
            gl = get_gitlab_connection(gitlab_url, gitlab_token)

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç –∏ —Ñ–∞–π–ª
        project = gl.projects.get(project_path)
        file_content = (
            project.files.get(file_path=file_path, ref=branch).decode().decode("utf-8")
        )

        logging.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª {file_path} –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ {project_path}")
        return file_content

    except gitlab.exceptions.GitlabGetError as e:
        if e.response_code == 404:
            logging.error(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–æ–µ–∫—Ç–µ {project_path}")
        else:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É {file_path}: {str(e)}")
        return ""
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {str(e)}")
        return ""
