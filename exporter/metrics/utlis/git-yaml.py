import gitlab
import yaml
import logging
from io import StringIO
from config import GITLAB_URL, GITLAB_TOKEN, GITLAB_BRANCH

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #
TARGET_PATH = "nexus/nexus-cleaner"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GitLab ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #
gl = gitlab.Gitlab(GITLAB_URL, private_token=GITLAB_TOKEN)
gl.auth()

result = {}           # {'repo_name': 'gitlab_url'}
repo_sources = {}     # {'repo_name': [file1, file2]}
files_processed = 0
repos_found = 0

logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ GitLab: {GITLAB_URL}")
logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ö–æ–¥ –ø—Ä–æ–µ–∫—Ç–æ–≤...")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û–±—Ö–æ–¥ –ø—Ä–æ–µ–∫—Ç–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #
projects = gl.projects.list(all=True)

for project in projects:
    try:
        items = project.repository_tree(path=TARGET_PATH, recursive=True)
        yaml_files = [
            item for item in items
            if item['type'] == 'blob' and item['name'].endswith(('.yml', '.yaml'))
        ]

        if not yaml_files:
            continue

        logger.info(f"üìÅ –ü—Ä–æ–µ–∫—Ç {project.path_with_namespace}: –Ω–∞–π–¥–µ–Ω–æ {len(yaml_files)} yaml-—Ñ–∞–π–ª–æ–≤")

        for file in yaml_files:
            file_path = file['path']
            try:
                f = project.files.get(file_path=file_path, ref=GITLAB_BRANCH)
                content = f.decode().decode('utf-8')
                data = yaml.safe_load(StringIO(content))
                files_processed += 1

                if isinstance(data, dict) and 'repo_names' in data:
                    for repo_name in data['repo_names']:
                        link = f"{GITLAB_URL}/{project.path_with_namespace}/-/blob/{GITLAB_BRANCH}/{file_path}"

                        if repo_name in result:
                            logger.warning(
                                f"‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä: '{repo_name}' –Ω–∞–π–¥–µ–Ω –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ö:\n"
                                f"    - —É–∂–µ –±—ã–ª: {repo_sources[repo_name][-1]}\n"
                                f"    - —Å–µ–π—á–∞—Å: {link}"
                            )

                        result[repo_name] = link
                        repo_sources.setdefault(repo_name, []).append(link)
                        repos_found += 1

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path} –≤ {project.path_with_namespace}: {e}")

    except gitlab.exceptions.GitlabGetError:
        logger.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ {project.path_with_namespace}: –ø—É—Ç—å '{TARGET_PATH}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        continue

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #
logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
logger.info(f"üìÑ –í—Å–µ–≥–æ yaml-—Ñ–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {files_processed}")
logger.info(f"üì¶ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö repo_names –Ω–∞–π–¥–µ–Ω–æ: {len(result)}")
logger.info(f"üîÅ –í—Å–µ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π repo_names (–≤–∫–ª—é—á–∞—è –ø–æ–≤—Ç–æ—Ä—ã): {repos_found}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #
print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç:")
for repo, link in result.items():
    print(f"{repo}: {link}")
