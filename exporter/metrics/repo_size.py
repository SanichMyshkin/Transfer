from prometheus_client import Gauge
from database.repository_info import get_repository_sizes, get_repository_data
from database.jobs_reader import get_jobs_data
from common.config import GITLAB_TOKEN, GITLAB_BRANCH, GITLAB_URL
from metrics.utils.api_gitlab import get_external_policies
from common.logs import logging

# –ï–¥–∏–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞ —Å –¥–≤—É–º—è –ª–µ–π–±–ª–∞–º–∏: –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –∏ –≤–Ω–µ—à–Ω—è—è –ø–æ–ª–∏—Ç–∏–∫–∞
REPO_STORAGE = Gauge(
    "nexus_repo_size",
    "Total size of Nexus repositories in bytes",
    [
        "repo_name",
        "repo_type",
        "repo_format",
        "blob_name",
        "internal_cleanup_policy",  # –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –ø–æ–ª–∏—Ç–∏–∫–∞
        "custom_cleaner_url",  # –≤–Ω–µ—à–Ω—è—è –ø–æ–ª–∏—Ç–∏–∫–∞
        "delete_temp_status",
        "compact_status",
    ],
)

# –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á
ALLOWED_TASK_TYPES = {
    "blobstore.delete-temp-files": "delete",
    "blobstore.compact": "compact",
}


def fetch_repository_metrics() -> list:
    logging.info("üîÑ –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö –∏ –º–µ—Ç—Ä–∏–∫–∞—Ö...")

    try:
        repo_size = get_repository_sizes()
        repo_data = get_repository_data()
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î: {e}")
        return []

    if not repo_data:
        logging.error(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö ‚Äî –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã"
        )
        return []

    for repo in repo_data:
        repo["size"] = repo_size.get(repo.get("repository_name"), 0)

    try:
        task_data = get_jobs_data()
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á –∏–∑ –ë–î: {e}")
        task_data = []

    # –ó–∞–¥–∞—á–∏ –ø–æ blobStore
    task_statuses = {}
    for task in task_data:
        task_type = task.get(".typeId")
        blob_name = task.get("blobstoreName")
        if task_type in ALLOWED_TASK_TYPES and blob_name:
            status_key = ALLOWED_TASK_TYPES[task_type]
            if blob_name not in task_statuses:
                task_statuses[blob_name] = {"delete": 0, "compact": 0}
            task_statuses[blob_name][status_key] = 1

    #external_links = get_external_policies(GITLAB_URL, GITLAB_TOKEN, GITLAB_BRANCH)
    external_links = {'dckr': 'https://wikipedia.com'}

    logging.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤–Ω–µ—à–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏: {external_links}")
    REPO_STORAGE.clear()

    for repo in repo_data:
        repo_name = repo.get("repository_name", "unknown")
        blob_name = repo.get("blob_store_name", "")
        internal_policy = repo.get("cleanup_policy") or ""
        presence_flags = task_statuses.get(blob_name, {"delete": 0, "compact": 0})
        repo.update(presence_flags)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª–∏—Ç–∏–∫–∏
        if repo_name in external_links:
            custom_cleaner_url = external_links[repo_name]
            internal_policy = ""  # –≤–Ω–µ—à–Ω—è—è –ø–æ–ª–∏—Ç–∏–∫–∞ –∑–∞–º–µ–Ω—è–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é
        else:
            custom_cleaner_url = ""

        # –õ–æ–≥
        logging.info(
            f"üì¶ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {repo_name} | blob: {blob_name} | "
            f"delete: {'‚úÖ' if repo.get('delete') else '‚ùå'} | "
            f"compact: {'‚úÖ' if repo.get('compact') else '‚ùå'} | "
            f"internal: {internal_policy or '‚Äî'} | external: {custom_cleaner_url or '‚Äî'}"
        )

        # –ú–µ—Ç—Ä–∏–∫–∞
        try:
            size = float(repo.get("size", 0) or 0)
        except (ValueError, TypeError):
            logging.warning(
                f"‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è {repo_name} –≤ —á–∏—Å–ª–æ"
            )
            size = 0.0

        REPO_STORAGE.labels(
            repo_name=repo_name,
            repo_type=repo.get("repository_type", "unknown"),
            repo_format=repo.get("format", "unknown"),
            blob_name=blob_name,
            internal_cleanup_policy=internal_policy,
            custom_cleaner_url=custom_cleaner_url,
            delete_temp_status=str(repo.get("delete", 0)),
            compact_status=str(repo.get("compact", 0)),
        ).set(size)

    logging.info("‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ —Å–æ–±—Ä–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    return repo_data
