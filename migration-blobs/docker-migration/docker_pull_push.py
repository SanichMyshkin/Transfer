# –ø—Ä–æ—Å—Ç–æ pull'–∏—Ç –∏ push'–∏—Ç –æ–±—Ä–∞–∑—ã —á–µ—Ä–µ–∑ docker, –±–µ–∑ skopeo

import argparse
import logging
import subprocess
import requests
import docker
import urllib3
import sys
import os
from dotenv import load_dotenv


urllib3.disable_warnings()

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO, format="[%(levelname)s] %(message)s")
log = logging.getLogger(__name__)


load_dotenv()

# === –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
NEXUS_URL = os.environ.get("NEXUS_URL")
USERNAME = os.environ.get("USERNAME")
PASSWORD = os.environ.get("PASSWORD")

if not all([NEXUS_URL, USERNAME, PASSWORD]):
    log.error(
        "‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: NEXUS_URL, NEXUS_USERNAME, NEXUS_PASSWORD"
    )
    sys.exit(1)

SOURCE_REPO = "docker-file-single-1"
TARGET_REPO = "dckr"
SOURCE_REGISTRY = "sanich.space:5000"
TARGET_REGISTRY = "sanich.space:8088"


# === Requests —Å auth ===
session = requests.Session()
session.auth = (USERNAME, PASSWORD)
session.verify = False  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL (–µ—Å–ª–∏ —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π)
session.headers.update({"Accept": "application/json"})


def docker_login(registry, username, password):
    log.info(f"–í—ã–ø–æ–ª–Ω—è–µ–º docker login –≤ {registry}")
    try:
        result = subprocess.run(
            ["docker", "login", registry, "-u", username, "--password-stdin"],
            input=password.encode(),
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            check=True,
        )
        log.info(result.stdout.decode().strip())
    except subprocess.CalledProcessError as e:
        log.error(f"–û—à–∏–±–∫–∞ docker login –≤ {registry}: {e.stderr.decode().strip()}")
        raise


def get_images_from_repo(repo_name):
    log.info(f"–ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–∑—ã –∏–∑ Nexus-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {repo_name}")
    images = []
    continuation_token = None
    base_url = f"{NEXUS_URL}/service/rest/v1/components"

    while True:
        params = {"repository": repo_name}
        if continuation_token:
            params["continuationToken"] = continuation_token

        response = session.get(base_url, params=params)
        response.raise_for_status()
        data = response.json()

        for item in data["items"]:
            name = item["name"]
            tag = item["version"]
            if tag:
                images.append((name, tag))

        continuation_token = data.get("continuationToken")
        if not continuation_token:
            break

    log.info(f"–ù–∞–π–¥–µ–Ω–æ {len(images)} –æ–±—Ä–∞–∑–æ–≤")
    return images


def pull_tag_push(images):
    docker_client = docker.from_env()

    for name, tag in images:
        source_image = f"{SOURCE_REGISTRY}/{name}:{tag}"
        target_image = f"{TARGET_REGISTRY}/{name}:{tag}"

        log.info(f"‚ñ∂Ô∏è Pull: {source_image}")
        docker_client.images.pull(source_image)

        log.info(f"üîÅ Tag: {source_image} -> {target_image}")
        docker_client.images.get(source_image).tag(target_image)

        log.info(f"üì§ Push: {target_image}")
        for line in docker_client.images.push(target_image, stream=True, decode=True):
            if "status" in line:
                log.debug(line["status"])

        log.info("üóë –£–¥–∞–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤")
        try:
            log.info(f"üóë –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑: {source_image}")
            docker_client.images.remove(source_image, force=True)
        except Exception as e:
            log.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {source_image}: {e}")
        try:
            log.info(f"üóë –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑: {target_image}")
            docker_client.images.remove(target_image, force=True)
        except Exception as e:
            log.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {target_image}: {e}")


def delete_repo_if_unused(repo_name):
    log.info(f"üßπ –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è {repo_name} –∏ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ blob store")
    # 1. –ü—Ä–æ–≤–µ—Ä–∏–º, –∫–∞–∫–∏–µ –µ—â–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ç–æ—Ç –∂–µ blob store
    repos = session.get(f"{NEXUS_URL}/service/rest/v1/repositories").json()
    target_repo = next((r for r in repos if r["name"] == repo_name), None)

    if not target_repo:
        log.warning(f"–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π {repo_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    blob_store = target_repo.get("storage", {}).get("blobStoreName")
    users_of_blob = [
        r["name"]
        for r in repos
        if r.get("storage", {}).get("blobStoreName") == blob_store
    ]

    if len(users_of_blob) > 1:
        log.warning(
            f"–ë–ª–æ–± {blob_store} —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤: {users_of_blob}. –ù–µ —É–¥–∞–ª—è–µ–º."
        )
    else:
        # –£–¥–∞–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        log.info(f"–£–¥–∞–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π {repo_name}")
        del_resp = session.delete(
            f"{NEXUS_URL}/service/rest/v1/repositories/{repo_name}"
        )
        if del_resp.status_code == 204:
            log.info(f"‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π {repo_name} —É–¥–∞–ª—ë–Ω")
        else:
            log.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {del_resp.status_code} {del_resp.text}")
        # (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —É–¥–∞–ª–∏—Ç—å blob ‚Äî —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ admin API –∏–ª–∏ –≤—Ä—É—á–Ω—É—é


def main():
    parser = argparse.ArgumentParser(
        description="–ú–∏–≥—Ä–∞—Ü–∏—è Docker-–æ–±—Ä–∞–∑–æ–≤ –º–µ–∂–¥—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏ Nexus"
    )
    parser.add_argument(
        "--cleanup",
        action="store_true",
        help="–£–¥–∞–ª–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏ –±–ª–æ–± (–µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)",
    )
    args = parser.parse_args()

    # Docker –ª–æ–≥–∏–Ω—ã
    docker_login(SOURCE_REGISTRY, USERNAME, PASSWORD)
    docker_login(TARGET_REGISTRY, USERNAME, PASSWORD)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤
    images = get_images_from_repo(SOURCE_REPO)
    if not images:
        log.warning("–ù–µ—Ç –æ–±—Ä–∞–∑–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏.")
        return

    # –ü–µ—Ä–µ–Ω–æ—Å
    pull_tag_push(images)

    # –û—á–∏—Å—Ç–∫–∞
    if args.cleanup:
        delete_repo_if_unused(SOURCE_REPO)


if __name__ == "__main__":
    main()
