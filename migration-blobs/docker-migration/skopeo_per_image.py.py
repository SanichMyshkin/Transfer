# —Å–ø–æ–ª—å–∑—É–µ—Ç skopeo, –Ω–æ —Å–æ–∑–¥–∞—ë—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä docker run –Ω–∞ –∫–∞–∂–¥—ã–π –æ–±—Ä–∞–∑

# import argparse
import logging
import subprocess
import requests
import urllib3
import sys
import os
from dotenv import load_dotenv


urllib3.disable_warnings()

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO, format="[%(levelname)s] %(message)s")
log = logging.getLogger(__name__)


load_dotenv()

# === –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
NEXUS_URL = os.environ.get("NEXUS_URL")
USERNAME = os.environ.get("USERNAME")
PASSWORD = os.environ.get("PASSWORD")

if not all([NEXUS_URL, USERNAME, PASSWORD]):
    log.error(
        "‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: NEXUS_URL, NEXUS_USERNAME, NEXUS_PASSWORD"
    )
    sys.exit(1)

SOURCE_REPO = "test-migration"
TARGET_REPO = "dckr"
SOURCE_REGISTRY = "sanich.space:5002"
TARGET_REGISTRY = "sanich.space:8089"

# –û–±—Ä–∞–∑ —Å Skopeo –≤–Ω—É—Ç—Ä–∏ Docker
SKOPEO_IMAGE = "quay.io/skopeo/stable:latest"


# === Requests-—Å–µ—Å—Å–∏—è ===
session = requests.Session()
session.auth = (USERNAME, PASSWORD)
session.verify = False
session.headers.update({"Accept": "application/json"})


def get_images_from_repo(repo_name):
    log.info(f"üì¶ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–∑–æ–≤ –∏–∑ Nexus-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è '{repo_name}'")
    components_url = f"{NEXUS_URL}/service/rest/v1/components"
    images = []
    continuation_token = None

    while True:
        params = {"repository": repo_name}
        if continuation_token:
            params["continuationToken"] = continuation_token

        resp = session.get(components_url, params=params)
        resp.raise_for_status()
        data = resp.json()

        for item in data.get("items", []):
            name = item["name"]
            tag = item["version"]
            if name and tag:
                images.append((name, tag))

        continuation_token = data.get("continuationToken")
        if not continuation_token:
            break

    log.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(images)} –æ–±—Ä–∞–∑–æ–≤")
    return images


def skopeo_copy_images(images):
    for name, tag in images:
        src = f"docker://{SOURCE_REGISTRY}/{name}:{tag}"
        dst = f"docker://{TARGET_REGISTRY}/{name}:{tag}"

        log.info(f"üîÅ skopeo copy {src} ‚Üí {dst}")

        cmd = [
            "docker",
            "run",
            "--rm",
            SKOPEO_IMAGE,
            "copy",
            "--src-tls-verify=false",
            "--dest-tls-verify=false",
            "--src-creds",
            f"{USERNAME}:{PASSWORD}",
            "--dest-creds",
            f"{USERNAME}:{PASSWORD}",
            src,
            dst,
        ]

        try:
            subprocess.run(cmd, check=True)
            log.info(f"‚úÖ {name}:{tag} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω")
        except subprocess.CalledProcessError as e:
            log.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è {name}:{tag}: {e}")


def main():
    # parser = argparse.ArgumentParser(description="–ú–∏–≥—Ä–∞—Ü–∏—è Docker-–æ–±—Ä–∞–∑–æ–≤ —á–µ—Ä–µ–∑ skopeo –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ")
    # args = parser.parse_args()

    images = get_images_from_repo(SOURCE_REPO)
    if not images:
        log.warning("–ù–µ—Ç –æ–±—Ä–∞–∑–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏.")
        return

    skopeo_copy_images(images)


if __name__ == "__main__":
    main()
