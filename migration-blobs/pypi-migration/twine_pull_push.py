import os
import subprocess
import tempfile
import logging
import requests
import urllib3
import argparse
import sys
from dotenv import load_dotenv


load_dotenv()

# === –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO, format="[%(levelname)s] %(message)s")
log = logging.getLogger(__name__)

# === –û—Ç–∫–ª—é—á–∞–µ–º SSL –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ===
urllib3.disable_warnings()

# === –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
NEXUS_URL = os.environ.get("NEXUS_URL")
USERNAME = os.environ.get("USERNAME")
PASSWORD = os.environ.get("PASSWORD")

if not all([NEXUS_URL, USERNAME, PASSWORD]):
    log.error(
        "‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: NEXUS_URL, NEXUS_USERNAME, NEXUS_PASSWORD"
    )
    sys.exit(1)

# === –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ ===
SOURCE_REPO = "test-pypi"
TARGET_REPO = "target-pypi"

SOURCE_INDEX_URL = f"{NEXUS_URL}/repository/{SOURCE_REPO}/simple"
TARGET_UPLOAD_URL = f"{NEXUS_URL}/repository/{TARGET_REPO}/"

# === requests —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π ===
session = requests.Session()
session.auth = (USERNAME, PASSWORD)
session.verify = False
session.headers.update({"Accept": "application/json"})


def get_all_packages(repo_name):
    log.info(f"üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ –∏–∑ {repo_name}...")
    url = f"{NEXUS_URL}/service/rest/v1/components"
    continuation_token = None
    packages = []

    while True:
        params = {"repository": repo_name}
        if continuation_token:
            params["continuationToken"] = continuation_token

        resp = session.get(url, params=params)
        resp.raise_for_status()
        data = resp.json()

        for item in data["items"]:
            name = item["name"]
            version = item["version"]
            packages.append((name, version))

        continuation_token = data.get("continuationToken")
        if not continuation_token:
            break

    log.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(packages)} –ø–∞–∫–µ—Ç–æ–≤")
    return packages


def is_package_uploaded(name, version):
    log.debug(f"üîé –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ {name}=={version} –≤ {TARGET_REPO}")
    url = f"{NEXUS_URL}/service/rest/v1/components"
    continuation_token = None

    while True:
        params = {"repository": TARGET_REPO}
        if continuation_token:
            params["continuationToken"] = continuation_token

        resp = session.get(url, params=params)
        resp.raise_for_status()
        data = resp.json()

        for item in data["items"]:
            if item["name"] == name and item["version"] == version:
                log.info(f"‚úÖ {name}=={version} —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return True

        continuation_token = data.get("continuationToken")
        if not continuation_token:
            break

    return False


def pip_download(name, version, download_dir):
    log.info(f"‚¨áÔ∏è pip download: {name}=={version}")

    try:
        subprocess.run(
            [
                "pip",
                "download",
                f"{name}=={version}",
                "--only-binary=:all:",
                "--no-deps",
                "--index-url",
                SOURCE_INDEX_URL,
                "-d",
                download_dir,
            ],
            check=True,
        )
    except subprocess.CalledProcessError as e:
        log.warning(f"‚ö†Ô∏è pip –Ω–µ —Å–º–æ–≥ —Å–∫–∞—á–∞—Ç—å wheel {name}=={version}: {e}")

    try:
        subprocess.run(
            [
                "pip",
                "download",
                f"{name}=={version}",
                "--no-binary=:all:",
                "--no-deps",
                "--index-url",
                SOURCE_INDEX_URL,
                "-d",
                download_dir,
            ],
            check=True,
        )
    except subprocess.CalledProcessError as e:
        log.warning(f"‚ö†Ô∏è pip –Ω–µ —Å–º–æ–≥ —Å–∫–∞—á–∞—Ç—å sdist {name}=={version}: {e}")


def twine_upload(file_path):
    log.info(f"‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º {os.path.basename(file_path)} —á–µ—Ä–µ–∑ twine")
    try:
        subprocess.run(
            [
                "twine",
                "upload",
                "--repository-url",
                TARGET_UPLOAD_URL,
                "-u",
                USERNAME,
                "-p",
                PASSWORD,
                "--non-interactive",
                file_path,
            ],
            check=True,
        )
    except subprocess.CalledProcessError as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file_path}: {e}")


def migrate_pypi_packages():
    packages = get_all_packages(SOURCE_REPO)
    if not packages:
        log.warning("‚ùó –ù–µ—Ç –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏")
        return

    with tempfile.TemporaryDirectory() as tmpdir:
        for name, version in packages:
            if is_package_uploaded(name, version):
                continue

            pip_download(name, version, tmpdir)

        for fname in os.listdir(tmpdir):
            fpath = os.path.join(tmpdir, fname)
            if fname.endswith((".whl", ".tar.gz", ".zip", ".tgz")):
                twine_upload(fpath)
            else:
                log.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–∞–π–ª: {fname}")


def main():
    parser = argparse.ArgumentParser(
        description="–ú–∏–≥—Ä–∞—Ü–∏—è PyPI –ø–∞–∫–µ—Ç–æ–≤ –º–µ–∂–¥—É Nexus-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏ —á–µ—Ä–µ–∑ pip –∏ twine"
    )
    args = parser.parse_args()

    migrate_pypi_packages()
    log.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


if __name__ == "__main__":
    main()
