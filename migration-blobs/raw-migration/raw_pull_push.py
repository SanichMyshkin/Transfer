import os
import sys
import tempfile
import logging
import requests
import urllib3
from pathlib import Path
from dotenv import load_dotenv

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()

# === –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO, format="[%(levelname)s] %(message)s")
log = logging.getLogger(__name__)

# === –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è SSL ===
urllib3.disable_warnings()

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
NEXUS_URL = os.getenv("NEXUS_URL")
USERNAME = os.getenv("USERNAME")
PASSWORD = os.getenv("PASSWORD")
SOURCE_REPO = os.getenv("SOURCE_REPO", "source-raw")
TARGET_REPO = os.getenv("TARGET_REPO", "target-raw")

if not all([NEXUS_URL, USERNAME, PASSWORD]):
    log.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: NEXUS_URL, USERNAME, PASSWORD")
    sys.exit(1)

session = requests.Session()
session.auth = (USERNAME, PASSWORD)
session.verify = False
session.headers.update({"Accept": "application/json"})


def get_all_raw_assets(repo_name):
    log.info(f"üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ RAW-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è {repo_name}")
    url = f"{NEXUS_URL}/service/rest/v1/assets"
    continuation_token = None
    assets = []

    while True:
        params = {"repository": repo_name}
        if continuation_token:
            params["continuationToken"] = continuation_token

        resp = session.get(url, params=params)
        resp.raise_for_status()
        data = resp.json()

        for item in data["items"]:
            path = item["path"]
            assets.append(path)

        continuation_token = data.get("continuationToken")
        if not continuation_token:
            break

    log.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(assets)} —Ñ–∞–π–ª–æ–≤")
    return assets


def download_asset(path, download_dir):
    url = f"{NEXUS_URL}/repository/{SOURCE_REPO}/{path}"
    log.info(f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–µ–º {path}")
    local_path = Path(download_dir) / path
    local_path.parent.mkdir(parents=True, exist_ok=True)

    try:
        r = session.get(url, stream=True)
        r.raise_for_status()
        with open(local_path, "wb") as f:
            for chunk in r.iter_content(chunk_size=8192):
                f.write(chunk)
        return local_path
    except requests.RequestException as e:
        log.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {path}: {e}")
        return None


def upload_asset(local_path, relative_path):
    upload_url = f"{NEXUS_URL}/repository/{TARGET_REPO}/{relative_path.as_posix()}"
    log.info(f"‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º {relative_path}")
    try:
        with open(local_path, "rb") as f:
            r = session.put(upload_url, data=f)
            r.raise_for_status()
    except requests.RequestException as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {relative_path}: {e}")


def verify_all_files(local_base: Path, asset_paths):
    log.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    failed = []

    for asset_path in asset_paths:
        relative_path = Path(asset_path)
        local_file = local_base / relative_path
        verify_url = f"{NEXUS_URL}/repository/{TARGET_REPO}/{relative_path.as_posix()}"

        try:
            r = session.get(verify_url, stream=True)
            r.raise_for_status()
            remote_data = r.content

            with open(local_file, "rb") as f:
                local_data = f.read()

            if local_data == remote_data:
                log.info(f"üü¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞: {relative_path}")
            else:
                log.error(f"üî¥ –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {relative_path}")
                failed.append(str(relative_path))

        except requests.RequestException as e:
            log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {relative_path}: {e}")
            failed.append(str(relative_path))

    if failed:
        log.warning(
            f"‚ùó –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏. –ù–µ—Å–æ–≤–ø–∞–≤—à–∏–µ —Ñ–∞–π–ª—ã: {len(failed)}"
        )
        for f in failed:
            log.warning(f"  - {f}")
    else:
        log.info("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")


def migrate_raw_assets():
    assets = get_all_raw_assets(SOURCE_REPO)
    if not assets:
        log.warning("‚ùó –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏")
        return

    with tempfile.TemporaryDirectory() as tmpdir:
        base_path = Path(tmpdir)
        for asset_path in assets:
            local_path = download_asset(asset_path, base_path)
            if local_path:
                upload_asset(local_path, Path(asset_path))

        # –ü–æ—Å–ª–µ –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∑–æ–∫ ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
        verify_all_files(base_path, assets)

    log.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è RAW-—Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


if __name__ == "__main__":
    migrate_raw_assets()
