import os
import tempfile
import logging
import requests
import subprocess
from dotenv import load_dotenv

# –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –†–£–ö–ê–ú–ò –õ–û–ì–ò–ù–ï–ú–°–Ø –ß–ï–†–ï–ó npm adduser --regisstry=<URL>

load_dotenv()

# === –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO, format="[%(levelname)s] %(message)s")
log = logging.getLogger(__name__)

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
NEXUS_URL = os.getenv("NEXUS_URL")  # –ë–µ–∑ https:// –Ω–∞ –∫–æ–Ω—Ü–µ
NPM_REPO = os.getenv("NPM_REPO", "source-npm")
REGISTRY_URL = f"{NEXUS_URL}/repository/{NPM_REPO}"

# === –°–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ ===
npm_packages = [
    ("lodash", "4.17.21"),
    ("axios", "1.6.8"),
    ("chalk", "5.3.0"),
    ("commander", "11.1.0"),
    ("express", "4.18.2"),
    ("moment", "2.29.4"),
    ("dotenv", "16.3.1"),
    ("debug", "4.3.4"),
    ("uuid", "9.0.1"),
    ("react", "18.2.0"),
]


def download_npm_tarball(name, version, dest_dir):
    log.info(f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–µ–º {name}@{version}")
    url = f"https://registry.npmjs.org/{name}/{version}"
    resp = requests.get(url)
    resp.raise_for_status()
    tarball_url = resp.json()["dist"]["tarball"]

    filename = os.path.join(dest_dir, f"{name}-{version}.tgz")
    with requests.get(tarball_url, stream=True) as r:
        r.raise_for_status()
        with open(filename, "wb") as f:
            for chunk in r.iter_content(chunk_size=8192):
                f.write(chunk)

    return filename


def publish_to_nexus(tarball_path):
    log.info(f"üì¶ –ü—É–±–ª–∏–∫—É–µ–º {os.path.basename(tarball_path)} –≤ Nexus")
    try:
        subprocess.run(
            [
                "npm", "publish", tarball_path,
                "--registry", REGISTRY_URL
            ],
            check=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        log.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
    except subprocess.CalledProcessError as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e.stderr.decode()}")


def main():
    with tempfile.TemporaryDirectory() as tmpdir:
        for name, version in npm_packages:
            try:
                tarball = download_npm_tarball(name, version, tmpdir)
                publish_to_nexus(tarball)
            except Exception as e:
                log.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å {name}@{version}: {e}")


if __name__ == "__main__":
    main()
