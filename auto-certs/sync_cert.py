import requests
import urllib3
from urllib.parse import urlparse
from requests.exceptions import RequestException
from dotenv import load_dotenv
import logging
import os

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

HEADERS = {
    "User-Agent": (
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 "
        "(KHTML, like Gecko) Chrome/120 Safari/537.36"
    )
}

# --- SSL/Cert config ---
NEXUS_CERT = os.getenv("NEXUS_CERT")  # –ø—É—Ç—å –¥–æ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ CA/cert
VERIFY = NEXUS_CERT if NEXUS_CERT else False

session = requests.Session()
adapter = requests.adapters.HTTPAdapter(max_retries=0)
session.mount("https://", adapter)
session.mount("http://", adapter)


def safe_get_json(url: str, auth: tuple, timeout: int = 20):
    try:
        response = session.get(
            url, auth=auth, headers=HEADERS, timeout=timeout, verify=VERIFY
        )
        if response.status_code == 400:
            logging.warning(f"‚ùó Nexus –≤–µ—Ä–Ω—É–ª 400 Bad Request –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {url}")
            return []
        response.raise_for_status()
        return response.json()
    except RequestException as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {url}: {e}")
        return []


def get_from_nexus(nexus_url: str, endpoint: str, auth: tuple, timeout: int = 20):
    full_url = f"{nexus_url.rstrip('/')}/service/rest/v1/{endpoint.lstrip('/')}"
    return safe_get_json(full_url, auth, timeout)


def fetch_remote_certs(nexus_url: str, remote_url: str, auth: tuple, repo: str):
    parsed = urlparse(remote_url)
    host = parsed.hostname
    if not host or parsed.scheme != "https":
        logging.info(f"‚è≠Ô∏è Repo='{repo}': {remote_url} –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç HTTPS")
        return []
    port = parsed.port or 443
    endpoint = f"security/ssl?host={host}&port={port}"
    certs = get_from_nexus(nexus_url, endpoint, auth)
    if isinstance(certs, dict):
        return [certs]
    elif isinstance(certs, list):
        return certs
    return []


def add_cert_to_truststore(
    nexus_url: str, auth: tuple, pem: str, cn: str, remote: str, repo: str
):
    try:
        resp = requests.post(
            f"{nexus_url}/service/rest/v1/security/ssl/truststore",
            auth=auth,
            headers={"Content-Type": "application/json"},
            json={"certificate": pem},
            timeout=10,
            verify=VERIFY,
        )
        if resp.status_code == 400:
            logging.warning(
                f"üîÑ Repo='{repo}': JSON-–≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è CN='{cn}', –ø—Ä–æ–±—É–µ–º raw PEM"
            )
            resp = requests.post(
                f"{nexus_url}/service/rest/v1/security/ssl/truststore",
                auth=auth,
                headers={"Content-Type": "application/x-pem-file"},
                data=pem.encode(),
                timeout=10,
                verify=VERIFY,
            )
        if resp.status_code == 409:
            logging.info(
                f"üîí Repo='{repo}': —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç CN='{cn}' —É–∂–µ –µ—Å—Ç—å –¥–ª—è {remote}"
            )
            return False
        resp.raise_for_status()
        logging.info(f"‚úÖ Repo='{repo}': –¥–æ–±–∞–≤–ª–µ–Ω CN='{cn}' –¥–ª—è {remote}")
        return True
    except Exception as e:
        logging.error(
            f"‚ùå Repo='{repo}': –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ CN='{cn}' –¥–ª—è {remote}: {e}"
        )
        return False


def sync_remote_certs(nexus_url: str, auth: tuple):
    repos = get_from_nexus(nexus_url, "repositories", auth) or []
    logging.info(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ {len(repos)} —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤")
    repos = [
        {
            "name": r["name"],
            "remote": r.get("attributes", {}).get("proxy", {}).get("remoteUrl", ""),
        }
        for r in repos
        if r.get("type") == "proxy"
        and r.get("attributes", {})
        .get("proxy", {})
        .get("remoteUrl", "")
        .startswith("https://")
    ]
    for repo in repos:
        remote = repo["remote"]
        name = repo["name"]
        logging.info(f"üîç Repo='{name}': –ø—Ä–æ–≤–µ—Ä—è–µ–º {remote}")
        remote_certs = fetch_remote_certs(nexus_url, remote, auth, name)
        if not remote_certs:
            logging.warning(
                f"‚ö†Ô∏è Repo='{name}': –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è {remote}"
            )
            continue
        for rc in remote_certs:
            remote_cn = rc.get("subjectCommonName")
            pem = rc.get("pem")
            if not remote_cn or not pem:
                logging.warning(
                    f"‚ö†Ô∏è Repo='{name}': —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–ª—è {remote}"
                )
                continue
            logging.info(
                f"‚ûï Repo='{name}': –ø—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å CN='{remote_cn}' –¥–ª—è {remote}"
            )
            add_cert_to_truststore(nexus_url, auth, pem, remote_cn, remote, name)


if __name__ == "__main__":
    load_dotenv()
    NEXUS_URL = os.getenv("NEXUS_URL")
    NEXUS_USER = os.getenv("NEXUS_USER")
    NEXUS_PASS = os.getenv("NEXUS_PASS")
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤‚Ä¶")
    sync_remote_certs(NEXUS_URL, (NEXUS_USER, NEXUS_PASS))